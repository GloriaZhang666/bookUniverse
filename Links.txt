https://www.geeksforgeeks.org/construct-tree-from-ancestor-matrix/
mat[i][j] = 1 if i is ancestor of j
mat[i][j] = 0, otherwise
Input: 0 1 1
       0 0 0 
       0 0 0 
Output: Root of one of the below trees.
    0                0
  /   \     OR     /   \
 1     2          2     1



visualization
like subwaylines
each book is a station while each label is the line.


https://towardsdatascience.com/visualizing-networks-in-python-d70f4cbeb259
https://towardsdatascience.com/introducing-jaal-interacting-with-network-made-easy-124173bb4fa
data structure
 edge_df:from,to(topology)
 node_df:id(other features)
Setting panel
 Search: 
 Filter: 
 Color: 


TODO
 1 generate the edge_df from node_df.
  Date based on feature-->from,to
  De-duplication
  1.1 df = pd.read_csv("init_data.csv")
  1.2 generate [from,to] dictionary from 1.1's df
  1.3 [1.2's dictiony AS df].drop_duplicates(inplace = True)
  1.3 output 1.3's dictiony to "node_data.csv"
 2 1's result as jaal's input
 
 


https://www.kite.com/python/answers/how-to-read-specific-column-from-csv-file-in-python
USE pandas.read_csv() TO READ A SPECIFIC COLUMN FROM A CSV FILE
To read a CSV file, call pd.read_csv(file_name, usecols=cols_list) 
EG.
col_list = ["Name", "Department"]
df = pd.read_csv("sample_file.csv", usecols=col_list)


https://stackoverflow.com/questions/4169252/remove-duplicates-in-list-of-object-with-python
The set(list_of_objects) will only remove the duplicates if you know what a duplicate is, that is, you'll need to define a uniqueness of an object.
def __eq__(self, other):
    return self.author_name==other.author_name\
           and self.title==other.title
           
           
https://www.geeksforgeeks.org/python-save-list-to-csv/
Using CSV Module
# field names 
fields = ['Name', 'Branch', 'Year', 'CGPA'] 
# data rows of csv file 
rows = [ ['Nikhil', 'COE', '2', '9.0'], 
  ......


https://zhuanlan.zhihu.com/p/123271223
书海星空WebApp中每本书作为一个节点包含评价人数、评分、被链接数（类似Google的RankPage算法根据网页被链接的数目来排网页的重要性，一般越好的书籍被链接的数目也越多）、链入的图书节点、链出的图书节点等信息。
书海星空可以根据看过的或找到的好书顺藤摸瓜来找相关的更多经典好书，书海中尽情泛舟，找到自己喜欢的宝藏。